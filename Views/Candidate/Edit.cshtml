@model GrouponJobsMVC.Models.Candidate
@{
    ViewBag.Title = "Edit a Candidate";
}
<h2>
    Edit</h2>
<link href="@Url.Content("~/Content/themes/base/jquery-ui.css")" rel="stylesheet" type="text/css" />
<script src="@Url.Content("~/Scripts/jquery-1.7.1.js")" type="text/javascript"></script>
<script type="text/javascript" src="@Url.Content("~/Scripts/jquery-ui-1.8.18.custom.min.js")"></script>
<script>

    $(function () {
        $(".datepicker").datepicker({
            dateFormat: 'dd-mm-yy',
            yearRange: '-65:+5',
            minDate: new Date(1995, 10 - 1, 25),
            changeYear: true,
            maxDate: "+3Y"
        });
    });
</script>
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    <fieldset>
    @ViewBag.ErroAtualizar
        <legend>Candidate</legend>
        @Html.HiddenFor(model => model.CandidateId)
        @Html.HiddenFor(model => model.AddressId)
        @Html.HiddenFor(model => model.Address.AddressId)
        @Html.HiddenFor(model => model.WorkflowId)
        @Html.HiddenFor(model => model.DateCreated)
        <div class="editor-label">
            @Html.LabelFor(model => model.FirstName, "First Name")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.FirstName)
            @Html.ValidationMessageFor(model => model.FirstName)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.LastName, "Last Name")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.LastName)
            @Html.ValidationMessageFor(model => model.LastName)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Email, "E-Mail")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Email)
            @Html.ValidationMessageFor(model => model.Email)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Birthday, "Birthday")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Birthday)
            @Html.ValidationMessageFor(model => model.Birthday)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.HomePhone, "Home Phone")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.HomePhone)
            @Html.ValidationMessageFor(model => model.HomePhone)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.MobilePhone, "Mobile Phone")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.MobilePhone)
            @Html.ValidationMessageFor(model => model.MobilePhone)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Gender)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.Gender, GrouponJobsMVC.Views.Candidate.CandidateDropDown.Gender(Model.Gender))
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.WillTravel)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.WillTravel, GrouponJobsMVC.Views.Candidate.CandidateDropDown.WillTravel(Model.WillTravel))
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.LastSalary, "Last Salary")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.LastSalary)
            @Html.ValidationMessageFor(model => model.LastSalary)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.SalaryExpectation, "Salary Expectation")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.SalaryExpectation)
            @Html.ValidationMessageFor(model => model.SalaryExpectation)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Address.Name, "Street Name")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Address.Name, "Street Name")
            @Html.ValidationMessageFor(model => model.Address.Name, "Street Name")
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Address.Neighbourhood)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Address.Neighbourhood)
            @Html.ValidationMessageFor(model => model.Address.Neighbourhood)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Address.CEP, "CEP")
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.Address.CEP)
            @Html.ValidationMessageFor(model => model.Address.CEP)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Address.City, "City")
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.Address.CityId, GrouponJobsMVC.Views.Candidate.CandidateDropDown.CityEdit(Model.CandidateId))
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.RecruiterId, "Recruiter")
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.RecruiterId, GrouponJobsMVC.Views.Candidate.CandidateDropDown.RecruiterEdit(Model.CandidateId))
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.Disposition.Name, "Disposition")
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.DispositionId, GrouponJobsMVC.Views.Candidate.CandidateDropDown.DispositionEdit(Model.CandidateId))
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.RatingId, "Rating")
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.RatingId, GrouponJobsMVC.Views.Candidate.CandidateDropDown.RatingEdit(Model.CandidateId))
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.MaritalStatusId, "Marital Status")
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.MaritalStatusId, GrouponJobsMVC.Views.Candidate.CandidateDropDown.MaritalStatusEdit(Model.CandidateId))
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.RequisitionId, "Requisition")
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.RequisitionId, GrouponJobsMVC.Views.Candidate.CandidateDropDown.RequisitionEdit(Model.CandidateId))
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.DisabilityId, "Disability")
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(model => model.DisabilityId, GrouponJobsMVC.Views.Candidate.CandidateDropDown.DisabilityEdit(Model.CandidateId))
        </div>
        <h1>
            Professional History
        </h1>
        <h3>
            Company</h3>
        <div class="Company">
            @for (int i = 0; i < Model.Company.Count; i++)
            {
                @Html.HiddenFor(m => m.Company[i].CandidateId)
                @Html.HiddenFor(m => m.Company[i].AddressId)
                @Html.HiddenFor(m => m.Company[i].Address.AddressId)
                @Html.HiddenFor(m => m.Company[i].CompanyId)
                @Html.HiddenFor(m => m.Company[i].NumberCompany, new { Value = i })
                @Html.Label("Company " + (i + 1) + "")<br />
                @Html.Label("Company Name:")  <br />
                @Html.TextBoxFor(m => m.Company[i].Name, new { Text = Model.Company[i].Name })<br />
                @Html.Label("Company City:")<br />
                @Html.DropDownListFor(m => m.Company[i].Address.CityId, GrouponJobsMVC.Views.Candidate.CandidateDropDown.CompanyCityEdit(Model.CandidateId, i))<br />
                @Html.Label("Salary:")<br />
                @Html.TextBoxFor(m => m.Company[i].Salary, new { Text = Model.Company[i].Salary })<br />
                <br />

            }
        </div>
        <h3>
            Courses</h3>
        <div class="Courses">
            @for (int i = 0; i < Model.Courses.Count; i++)
            { 
                @Html.HiddenFor(m => m.Courses[i].CandidateId)
                @Html.HiddenFor(m => m.Courses[i].CoursesId)
                @Html.HiddenFor(m => m.Courses[i].NumberCourses, new { Value = i })                
                @Html.Label("Course " + (i + 1) + "")<br />
                @Html.Label("Course Name:")  <br />
                @Html.TextBoxFor(m => m.Courses[i].Name, new { Text = Model.Courses[i].Name })<br />
                @Html.Label("School Name:")<br />
                @Html.TextBoxFor(m => m.Courses[i].SchoolName, new { Text = Model.Courses[i].SchoolName })<br />
                @Html.Label("Course Start(Year):")<br />
                @Html.TextBoxFor(m => m.Courses[i].Start, new { Class = "datepicker", Text = Model.Courses[i].Start })<br />
                @Html.Label("Course End(Year):")<br />
                @Html.TextBoxFor(m => m.Courses[i].End, new { Class = "datepicker", Text = Model.Courses[i].End })<br />
                <br />  

            }
        </div>
        <p>
            <input type="submit" value="Save" />
        </p>
    </fieldset>
}
<div>
    @Html.ActionLink("Back to List", "Index")
</div>
